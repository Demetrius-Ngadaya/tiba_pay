import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:printing/printing.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:tiba_pay/models/payment.dart';
import 'package:tiba_pay/models/user.dart';
import 'package:tiba_pay/repositories/payment_repository.dart';
import 'package:tiba_pay/utils/database_helper.dart';
import 'package:excel/excel.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';

class PaymentReportScreen extends StatefulWidget {
  final User user;

  const PaymentReportScreen({super.key, required this.user});

  @override
  _PaymentReportScreenState createState() => _PaymentReportScreenState();
}

class _PaymentReportScreenState extends State<PaymentReportScreen> {
  final _paymentRepository = PaymentRepository(dbHelper: DatabaseHelper.instance);
  List<Payment> _payments = [];
  bool _isLoading = false;
  int _rowsPerPage = 10;
  int _currentPage = 0;
  final TextEditingController _searchController = TextEditingController();
  DateTime? _startDate;
  DateTime? _endDate;
  String _selectedSponsor = 'All';

  @override
  void initState() {
    super.initState();
    _loadPayments();
  }

  Future<void> _loadPayments() async {
    setState(() => _isLoading = true);
    try {
      final payments = widget.user.role == 'admin'
          ? await _paymentRepository.getAllPaymentsWithDetails()
          : await _paymentRepository.getPaymentsByUser(widget.user.userId!);
      setState(() {
        _payments = payments;
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading payments: ${e.toString()}')),
      );
    }
  }

  List<Payment> _getFilteredPayments() {
    var filtered = _payments;

    if (_searchController.text.isNotEmpty) {
      final query = _searchController.text.toLowerCase();
      filtered = filtered.where((payment) {
        return payment.patientId.toLowerCase().contains(query) ||
            (payment.patientName?.toLowerCase().contains(query) ?? false) ||
            payment.receiptNumber.toLowerCase().contains(query);
      }).toList();
    }

    if (_startDate != null) {
      filtered = filtered.where((payment) => payment.paymentDate.isAfter(_startDate!)).toList();
    }

    if (_endDate != null) {
      filtered = filtered.where((payment) => payment.paymentDate.isBefore(_endDate!.add(const Duration(days: 1)))).toList();
    }

    if (_selectedSponsor != 'All') {
      filtered = filtered.where((payment) => payment.sponsor == _selectedSponsor).toList();
    }

    return filtered;
  }

  Future<void> _exportToPdf() async {
    final filteredPayments = _getFilteredPayments();
    final pdf = pw.Document();
    final currencyFormat = NumberFormat("#,##0.00", "en_US");

    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4,
        build: (pw.Context context) {
          return pw.Column(
            children: [
              pw.Header(
                level: 0,
                child: pw.Text(
                  'Payment Report',
                  style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold),
                ),
              ),
              pw.SizedBox(height: 10),
              pw.Text('Generated on: ${DateFormat('yyyy-MM-dd HH:mm').format(DateTime.now())}'),
              pw.Text('Generated by: ${widget.user.firstName} ${widget.user.lastName}'),
              pw.SizedBox(height: 20),
              pw.Table.fromTextArray(
                border: pw.TableBorder.all(),
                headers: ['S/N', 'Receipt No', 'Patient', 'Phone', 'Item', 'Quantity', 'Amount', 'Department', 'Sponsor', 'Date', 'Created By'],
                data: filteredPayments.asMap().entries.map((entry) {
                  final i = entry.key;
                  final payment = entry.value;
                  return [
                    i + 1,
                    payment.receiptNumber,
                    payment.patientName ?? 'Unknown',
                    payment.phoneNumber ?? 'N/A',
                    payment.item.itemName,
                    payment.item.quantity,
                    currencyFormat.format(payment.item.amount),
                    payment.item.itemCategory,
                    payment.sponsor,
                    DateFormat('yyyy-MM-dd HH:mm').format(payment.paymentDate),
                    payment.createdBy.toString(),
                  ];
                }).toList(),
              ),
            ],
          );
        },
      ),
    );

    await Printing.layoutPdf(onLayout: (PdfPageFormat format) async => pdf.save());
  }

  Future<void> _exportToExcel() async {
    final filteredPayments = _getFilteredPayments();
    final excel = Excel.createExcel();
    final sheet = excel['Payment Report'];
    final currencyFormat = NumberFormat("#,##0.00", "en_US");

    sheet.appendRow(['S/N', 'Receipt No', 'Patient', 'Phone', 'Item', 'Quantity', 'Amount', 'Department', 'Sponsor', 'Date', 'Created By']);

    for (var i = 0; i < filteredPayments.length; i++) {
      final payment = filteredPayments[i];
      sheet.appendRow([
        i + 1,
        payment.receiptNumber,
        payment.patientName ?? 'Unknown',
        payment.phoneNumber ?? 'N/A',
        payment.item.itemName,
        payment.item.quantity,
        currencyFormat.format(payment.item.amount),
        payment.item.itemCategory,
        payment.sponsor,
        DateFormat('yyyy-MM-dd HH:mm').format(payment.paymentDate),
        payment.createdBy.toString(),
      ]);
    }

    final directory = await getApplicationDocumentsDirectory();
    final filePath = '${directory.path}/payment_report_${DateFormat('yyyyMMdd_HHmmss').format(DateTime.now())}.xlsx';
    final file = File(filePath);
    await file.writeAsBytes(excel.encode()!);

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Excel file saved to: $filePath')),
    );
  }

  Future<void> _selectDate(BuildContext context, bool isStartDate) async {
    final picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime.now(),
    );
    if (picked != null) {
      setState(() {
        if (isStartDate) {
          _startDate = picked;
        } else {
          _endDate = picked;
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final filteredPayments = _getFilteredPayments();
    final pageCount = (filteredPayments.length / _rowsPerPage).ceil();
    final paginatedPayments = filteredPayments
        .skip(_currentPage * _rowsPerPage)
        .take(_rowsPerPage)
        .toList();
    final currencyFormat = NumberFormat("#,##0.00", "en_US");
    final sponsors = ['All', ..._payments.map((p) => p.sponsor).toSet().toList()];

    return Scaffold(
      appBar: AppBar(
        title: const Text('Payment Report'),
        actions: [
          IconButton(icon: const Icon(Icons.picture_as_pdf), onPressed: _exportToPdf),
          IconButton(icon: const Icon(Icons.grid_on), onPressed: _exportToExcel),
        ],
      ),
      body: SafeArea(
        child: Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Card(
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      TextField(
                        controller: _searchController,
                        decoration: InputDecoration(
                          labelText: 'Search',
                          prefixIcon: const Icon(Icons.search),
                          suffixIcon: IconButton(
                            icon: const Icon(Icons.clear),
                            onPressed: () {
                              _searchController.clear();
                              setState(() {});
                            },
                          ),
                        ),
                        onChanged: (value) => setState(() {}),
                      ),
                      const SizedBox(height: 10),
                      Row(
                        children: [
                          Expanded(
                            child: OutlinedButton(
                              onPressed: () => _selectDate(context, true),
                              child: Text(_startDate == null
                                  ? 'Select Start Date'
                                  : 'From: ${DateFormat('yyyy-MM-dd').format(_startDate!)}'),
                            ),
                          ),
                          const SizedBox(width: 10),
                          Expanded(
                            child: OutlinedButton(
                              onPressed: () => _selectDate(context, false),
                              child: Text(_endDate == null
                                  ? 'Select End Date'
                                  : 'To: ${DateFormat('yyyy-MM-dd').format(_endDate!)}'),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 10),
                      Row(
                        children: [
                          Expanded(
                            child: DropdownButtonFormField<String>(
                              value: _selectedSponsor,
                              decoration: const InputDecoration(
                                labelText: 'Filter by Sponsor',
                                border: OutlineInputBorder(),
                              ),
                              items: sponsors.map((sponsor) {
                                return DropdownMenuItem<String>(
                                  value: sponsor,
                                  child: Text(sponsor),
                                );
                              }).toList(),
                              onChanged: (value) {
                                setState(() {
                                  _selectedSponsor = value!;
                                });
                              },
                            ),
                          ),
                          const SizedBox(width: 10),
                          DropdownButton<int>(
                            value: _rowsPerPage,
                            items: [10, 25, 50, 100].map((value) {
                              return DropdownMenuItem<int>(
                                value: value,
                                child: Text('$value items'),
                              );
                            }).toList(),
                            onChanged: (value) {
                              setState(() {
                                _rowsPerPage = value!;
                                _currentPage = 0;
                              });
                            },
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ),
            Expanded(
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: SingleChildScrollView(
                  scrollDirection: Axis.vertical,
                  child: DataTable(
                    border: TableBorder.all(color: Colors.grey),
                    columnSpacing: 20,
                    columns: const [
                      DataColumn(label: Text('S/N')),
                      DataColumn(label: Text('Receipt No')),
                      DataColumn(label: Text('Patient')),
                      DataColumn(label: Text('Phone')),
                      DataColumn(label: Text('Item')),
                      DataColumn(label: Text('Qty'), numeric: true),
                      DataColumn(label: Text('Amount'), numeric: true),
                      DataColumn(label: Text('Department')),
                      DataColumn(label: Text('Sponsor')),
                      DataColumn(label: Text('Date')),
                      DataColumn(label: Text('Created By')),
                    ],
                    rows: paginatedPayments.asMap().entries.map((entry) {
                      final index = entry.key;
                      final payment = entry.value;
                      return DataRow(cells: [
                        DataCell(Text('${index + 1}')),
                        DataCell(Text(payment.receiptNumber)),
                        DataCell(Text(payment.patientName ?? 'Unknown')),
                        DataCell(Text(payment.phoneNumber ?? 'N/A')),
                        DataCell(Text(payment.item.itemName)),
                        DataCell(Text('${payment.item.quantity}')),
                        DataCell(Text(currencyFormat.format(payment.item.amount))),
                        DataCell(Text(payment.item.itemCategory)),
                        DataCell(Text(payment.sponsor)),
                        DataCell(Text(DateFormat('yyyy-MM-dd HH:mm').format(payment.paymentDate))),
                        DataCell(Text(payment.createdBy.toString())),
                      ]);
                    }).toList(),
                  ),
                ),
              ),
            ),
            if (pageCount > 1)
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  IconButton(
                    icon: const Icon(Icons.arrow_back),
                    onPressed: _currentPage > 0
                        ? () => setState(() => _currentPage--)
                        : null,
                  ),
                  Text('Page ${_currentPage + 1} of $pageCount'),
                  IconButton(
                    icon: const Icon(Icons.arrow_forward),
                    onPressed: _currentPage < pageCount - 1
                        ? () => setState(() => _currentPage++)
                        : null,
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }
}
